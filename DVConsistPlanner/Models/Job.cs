using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;

namespace DVConsistPlanner.Models
{
    public class Job
    {
        public Job()
        {
            LicenseRequirements = new List<License>();
        }
        #region Properties
        
        /// <summary>
        /// Index identifier.
        /// </summary>
        public int ID { get; set; }
        /// <summary>
        /// The ID of the <see cref="Consist"/> that this <see cref="Job"/> is part of.
        /// </summary>
        [ForeignKey(nameof(Consist.ID))]
        public int? ConsistID { get; set; }
        /// <summary>
        /// Represents whether the job is in an active state or not (i.e. Accepted in the Job Validator).
        /// </summary>
        public bool IsActive { get; set; }
        /// <summary>
        /// The departing station, the origin of the cargo to be transported.
        /// </summary>
        /// <remarks>
        /// This is usually the station displayed on the top of the card.
        /// </remarks>
        public Station Departing { get; set; }
        /// <summary>
        /// The arriving station, the destination for the cargo being transported.
        /// </summary>
        /// <remarks>
        /// This is usually the station displayed on the bottom of the card.
        /// </remarks>
        public Station Arriving { get; set; }
        /// <summary>
        /// The defintion of the kind of transport taking place.
        /// </summary>
        public JobType JobType { get; set; }
        /// <summary>
        /// Job number that was generated by the game.
        /// </summary>
        public int JobNumber { get; set; }
        /// <summary>
        /// Payout of the job, without time bonus.
        /// </summary>
        public int Payout { get; set; }
        /// <summary>
        /// The amount of time set to get the bonus.
        /// </summary>
        public int TimeBonus { get; set; }
        /// <summary>
        /// The value of the cars in this job, represented in Millions.
        /// </summary>
        [Precision(18, 2)]
        public decimal TrainValue { get; set; }
        /// <summary>
        /// The total mass of the cars in this job.
        /// </summary>
        [Precision(18, 2)]
        public decimal TrainMass { get; set; }
        /// <summary>
        /// The total length of all cars in the job.
        /// </summary>
        [Precision(18, 2)]
        public decimal TrainLength { get; set; }
        /// <summary>
        /// The license requirements of the job.
        /// </summary>
        public ICollection<License> LicenseRequirements { get; set; }
        #endregion
        #region Fields
        /// <summary>
        /// The abbreviated name of the job (what you see in your toolbelt).
        /// </summary>
        [NotMapped]
        public string JobName { get { return $"{Departing.Abbreviation}-{JobType.GetJobTypeAbbrev()}-{JobNumber:D2}"; } }
        /// <summary>
        /// The total payout including the bonus for completing the job before the time is up.
        /// </summary>
        [NotMapped]
        public int BonusPayout { get { return (int)(Payout * 1.5); } }
        #endregion
    }
    /// <summary>
    /// The types of jobs available.
    /// </summary>
    public enum JobType
    {
        Logistic = 0,
        Freight = 1,
        ShuntingLoad = 2,
        ShuntingUnload = 3
    }
    // Job specific extensions
    public static partial class Extensions
    {
        /// <summary>
        /// Tries to get a <see cref="Job"/> from the collection, returns null if not found.
        /// </summary>
        /// <param name="jobList"></param>
        /// <param name="jobNumber"></param>
        /// <returns>Returns the desired <see cref="Job"/> if found, otherwise returns null.</returns>
        public static Job? GetJob(this List<Job> jobList, int jobNumber)
        {
            return jobList.FirstOrDefault(j => j.JobNumber == jobNumber) ?? null;
        }
        /// <summary>
        /// Gets the abbreviation for the <see cref="JobType"/> (usually to be used for display purposes).
        /// </summary>
        /// <param name="jobType"></param>
        /// <returns>Returns a two letter abbrevation representing the <see cref="JobType"/>.</returns>
        public static string GetJobTypeAbbrev(this JobType jobType)
        {
            string result = jobType switch
            {
                JobType.Logistic => "LH",
                JobType.Freight => "FH",
                JobType.ShuntingLoad => "SL",
                JobType.ShuntingUnload => "SU",
                _ => "",
            };
            return result;
        }
    }
}
