using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;

namespace DVConsistPlanner.Models
{
    public class DerailValley
    {
        public class Consist
        {
            public Consist()
            {
                Jobs = new List<Job>();
                Locomotives = new List<Locomotive>();
            }

            public List<Job> Jobs { get; set; }
            public List<Locomotive> Locomotives { get; set; }

            public decimal TotalTonnage
            {
                get { return Jobs.Select(x => x.TrainMass).Sum(); }
            }
            public decimal TotalLength
            {
                get { return Jobs.Select(x => x.TrainLength).Sum(); }
            }
            public int TotalPayout
            {
                get { return Jobs.Select(x => x.Payout).Sum(); }
            }
            public int TotalBonusPayout
            {
                //get { return Jobs.Select(x => x.BonusPayout).Sum(); }
                get { return (int)(TotalPayout * 1.5); }
            }
        }

        public class Locomotive
        {
            public int Weight { get; set; }
            public decimal Length { get; set; }
            public decimal Tonnage 
            { 
                get {
                    // 1 kg = 907.18474 Tonnes (approx, according to google somewhere)
                    return (decimal)(Weight / 907.18474);
                }
            }
        }

        public class Station
        {
            public string Name { get; set; }
            public string Abbreviation { get; set; }
            public List<string> Services { get; set; }
            public List<string> Tracks { get; set; }
            public List<string> YardLegend { get; set; }
        }
        public static List<Station> GetStations()
        {
            Stream stationData = Assembly.GetExecutingAssembly().GetManifestResourceStream("DVConsistPlanner.Resources.stations.json");
            if (stationData == null) throw new ArgumentNullException("stationData");

            StreamReader reader = new StreamReader(stationData);
            List<Station> stationList = JsonConvert.DeserializeObject<List<Station>>(reader.ReadToEnd());

            return stationList;
        }

        public class Job
        {
            public Job()
            {
                LicenseRequirements = new List<object>();
            }
            #region Properties
            /// <summary>
            /// The departing station, the origin of the cargo to be transported.
            /// </summary>
            /// <remarks>
            /// This is usually the station displayed on the top of the card.
            /// </remarks>
            public Station Departing { get; set; }
            /// <summary>
            /// The arriving station, the destination for the cargo being transported.
            /// </summary>
            /// <remarks>
            /// This is usually the station displayed on the bottom of the card.
            /// </remarks>
            public Station Arriving { get; set; }
            /// <summary>
            /// The defintion of the kind of transport taking place.
            /// </summary>
            public JobType JobType { get; set; }
            /// <summary>
            /// Job number that was generated by the game.
            /// </summary>
            public int JobNumber { get; set; }
            /// <summary>
            /// Payout of the job, without time bonus.
            /// </summary>
            public int Payout { get; set; }
            /// <summary>
            /// The amount of time set to get the bonus.
            /// </summary>
            public int TimeBonus { get; set; }
            /// <summary>
            /// The value of the cars in this job, represented in Millions.
            /// </summary>
            public decimal TrainValue { get; set; }
            /// <summary>
            /// The total mass of the cars in this job.
            /// </summary>
            public decimal TrainMass { get; set; }
            /// <summary>
            /// The total length of all cars in the job.
            /// </summary>
            public decimal TrainLength { get; set; }
            /// <summary>
            /// NOT YET IMPLEMENTED
            /// </summary>
            public List<object> LicenseRequirements { get; set; }
            #endregion
            #region Fields
            /// <summary>
            /// The abbreviated name of the job (what you see in your toolbelt).
            /// </summary>
            public string JobName => $"{Departing.Abbreviation}-{GetJobAbbreviation(JobType)}-{JobNumber:D2}";
            /// <summary>
            /// The total payout including the bonus for completing the job before the time is up.
            /// </summary>
            public int BonusPayout { get { return (int)(Payout * 1.5); } }
            #endregion
        }
        public enum JobType
        {
            Logistic = 0,
            Freight = 1,
            ShuntingLoad = 2,
            ShuntingUnload = 3
        }
        public static string GetJobAbbreviation(JobType jobType)
        {
            string result = jobType switch
            {
                JobType.Logistic => "LH",
                JobType.Freight => "FH",
                JobType.ShuntingLoad => "SL",
                JobType.ShuntingUnload => "SU",
                _ => "",
            };
            return result;
        }
    }
}
